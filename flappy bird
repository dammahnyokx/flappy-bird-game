import pygame
import random
import asyncio
import platform

# Initialize Pygame
pygame.init()

# Constants
WIDTH = 400
HEIGHT = 600
FPS = 60
GRAVITY = 0.25
BIRD_JUMP = -7
PIPE_SPEED = -4
PIPE_GAP = 200
PIPE_FREQ = 1500  # milliseconds

# Colors
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
GREEN = (0, 255, 0)

# Set up display
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Flappy Bird")
clock = pygame.time.Clock()

# Bird properties
bird_x = 100
bird_y = HEIGHT // 2
bird_velocity = 0
bird_rect = pygame.Rect(bird_x, bird_y, 30, 30)

# Pipe properties
pipes = []
score = 0
font = pygame.font.Font(None, 36)

# Game state
game_over = False

def create_pipe():
    gap_y = random.randint(150, HEIGHT - 150 - PIPE_GAP)
    bottom_pipe = pygame.Rect(WIDTH, gap_y + PIPE_GAP, 50, HEIGHT)
    top_pipe = pygame.Rect(WIDTH, 0, 50, gap_y)
    return [bottom_pipe, top_pipe]

def setup():
    global bird_y, bird_velocity, pipes, score, game_over
    bird_y = HEIGHT // 2
    bird_velocity = 0
    pipes = []
    score = 0
    game_over = False
    pygame.time.set_timer(pygame.USEREVENT, PIPE_FREQ)

async def update_loop():
    global bird_y, bird_velocity, score, game_over

    for event in pygame.event.get():
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not game_over:
                bird_velocity = BIRD_JUMP
            if event.key == pygame.K_r and game_over:
                setup()
        if event.type == pygame.USEREVENT and not game_over:
            pipes.append(create_pipe())

    if not game_over:
        # Update bird
        bird_velocity += GRAVITY
        bird_y += bird_velocity
        bird_rect.y = bird_y

        # Update pipes
        for pipe_pair in pipes[:]:
            for pipe in pipe_pair:
                pipe.x += PIPE_SPEED
            if pipe_pair[0].right < 0:
                pipes.remove(pipe_pair)
                score += 1

        # Collision detection
        for pipe_pair in pipes:
            if bird_rect.colliderect(pipe_pair[0]) or bird_rect.colliderect(pipe_pair[1]):
                game_over = True
            if bird_y < 0 or bird_y > HEIGHT:
                game_over = True

    # Draw
    screen.fill(BLACK)
    for pipe_pair in pipes:
        pygame.draw.rect(screen, GREEN, pipe_pair[0])
        pygame.draw.rect(screen, GREEN, pipe_pair[1])
    pygame.draw.rect(screen, WHITE, bird_rect)
    
    # Draw score
    score_text = font.render(str(score), True, WHITE)
    screen.blit(score_text, (WIDTH // 2, 50))
    
    if game_over:
        game_over_text = font.render("Game Over! Press R to Restart", True, WHITE)
        screen.blit(game_over_text, (WIDTH // 2 - game_over_text.get_width() // 2, HEIGHT // 2))
    
    pygame.display.flip()

async def main():
    setup()
    while True:
        await update_loop()
        await asyncio.sleep(1.0 / FPS)

if platform.system() == "Emscripten":
    asyncio.ensure_future(main())
else:
    if __name__ == "__main__":
        asyncio.run(main())
